str(train)
str(test)
# Survival rates in absolute numbers
table(train$Survived)
# Survival rates in proportions
prop.table(table(train$Survived))
# Two-way comparison: Sex and Survived
table(train$Sex, train$Survived)
# Two-way comparison: row-wise proportions
prop.table(table(train$Sex, train$Survived), 1)
# Your train and test set are still loaded
str(train)
str(test)
# Survival rates in absolute numbers
table(train$Survived)
# Survival rates in proportions
prop.table(table(train$Survived))
# Two-way comparison: Sex and Survived
table(train$Sex, train$Survived)
# Two-way comparison: row-wise proportions
prop.table(table(train$Sex, train$Survived), 1)
# Your train and test set are still loaded
str(train)
str(test)
# Survival rates in absolute numbers
table(train$Survived)
# Survival rates in proportions
prop.table(table(train$Survived))
# Two-way comparison: Sex and Survived
table(train$Sex, train$Survived)
# Two-way comparison: row-wise proportions
prop.table(table(train$Sex, train$Survived), 1)
# Create the column child, and indicate whether child or no child
train$Child <- NA
train$Child[train$Age < 18] <- 1
train$Child[train$Age >= 18] <- 0
# Two-way comparison
table(train$Child)
prop.table(table(train$Child))
prop.table(table(train$Child, train$Survived), 1)
# Your train and test set are still loaded in
str(train)
str(test)
# Copy of test
test_one <- test
# Initialize a Survived column to 0
test_one$Survived = 0
# Set Survived to 1 if Sex equals "female"
test_one$Survived[test$Sex == "female"] <- 1
# Load in the R package
library(rpart)
# Your train and test set are still loaded in
str(train)
str(test)
# Build the decision tree
my_tree_two <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, method = "class")
# Visualize the decision tree using plot() and text()
plot(my_tree_two)
text(my_tree_two)
# Load in the packages to build a fancy plot
library(rattle)
library(rpart.plot)
library(RColorBrewer)
# Time to plot your fancy tree
fancyRpartPlot(my_tree_two)
# Import the training set: train
train_url <- "http://s3.amazonaws.com/assets.datacamp.com/course/Kaggle/train.csv"
train <- read.csv(train_url)
# Import the testing set: test
test_url <- "http://s3.amazonaws.com/assets.datacamp.com/course/Kaggle/test.csv"
test <- read.csv(test_url)
# Print train and test to the console
train
test
# Your train and test set are still loaded
str(train)
str(test)
# Survival rates in absolute numbers
table(train$Survived)
# Survival rates in proportions
prop.table(table(train$Survived))
# Two-way comparison: Sex and Survived
table(train$Sex, train$Survived)
# Two-way comparison: row-wise proportions
prop.table(table(train$Sex, train$Survived), 1)
# Create the column child, and indicate whether child or no child
train$Child <- NA
train$Child[train$Age < 18] <- 1
train$Child[train$Age >= 18] <- 0
# Two-way comparison
table(train$Child)
prop.table(table(train$Child))
prop.table(table(train$Child, train$Survived), 1)
# Your train and test set are still loaded in
str(train)
str(test)
# Copy of test
test_one <- test
# Initialize a Survived column to 0
test_one$Survived = 0
# Set Survived to 1 if Sex equals "female"
test_one$Survived[test$Sex == "female"] <- 1
# Load in the R package
library(rpart)
# Your train and test set are still loaded in
str(train)
str(test)
# Build the decision tree
my_tree_two <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, method = "class")
# Visualize the decision tree using plot() and text()
plot(my_tree_two)
text(my_tree_two)
# Load in the packages to build a fancy plot
library(rattle)
library(rpart.plot)
library(RColorBrewer)
# Time to plot your fancy tree
fancyRpartPlot(my_tree_two)
# Import the training set: train
train_url <- "http://s3.amazonaws.com/assets.datacamp.com/course/Kaggle/train.csv"
train <- read.csv(train_url)
# Import the testing set: test
test_url <- "http://s3.amazonaws.com/assets.datacamp.com/course/Kaggle/test.csv"
test <- read.csv(test_url)
# Print train and test to the console
train
test
str(train)
str(test)
View(train)
View(test)
# Your train and test set are still loaded
str(train)
str(test)
# Survival rates in absolute numbers
table(train$Survived)
# Survival rates in proportions
prop.table(table(train$Survived))
# Two-way comparison: Sex and Survived
table(train$Sex, train$Survived)
# Two-way comparison: row-wise proportions
prop.table(table(train$Sex, train$Survived), 1)
# Create the column child, and indicate whether child or no child
train$Child <- NA
train$Child[train$Age < 18] <- 1
train$Child[train$Age >= 18] <- 0
# Two-way comparison
table(train$Child)
prop.table(table(train$Child))
prop.table(table(train$Child, train$Survived), 1)
train$Child
head(train$Child)
?table
View(train)
str(house)
str(house)
load("./final/lvr_prices_big5.RData")
house = lvr_prices[which(lvr_prices$city_land_type == "住" &
lvr_prices$total_price > 0 &
lvr_prices$building_sqmeter > 0 &
c(lvr_prices$finish_ymd) != 1), ]
table(c(1,4,4,3))
which.max(table(c(1,4,4,3)))
?which.max
x <- c(1:4, 0:5, 11)
which.max(x)
table(x)
which.max(table(x))
names(which.max(table(c(1,4,4,3))))
table(c(1,4,4,3))
which.max(table(c(1,4,4,3)))
names(which.max(table(c(1,4,4,3))))
class(which.max(table(c(1,4,4,3))))
type(which.max(table(c(1,4,4,3))))
which.max(table(c(1,4,4,3)))
typeof(which.max(table(c(1,4,4,3))))
?summarise_at
??summarise_at
load('Statistics/applenews.RData')
str(applenews)
applenews %>%
group_by(category) %>%
summarise_at(.vars=vars(clicked), .funs=funs(sum,mean))
load('Statistics/applenews.RData')
library(dplyr)
applenews %>%
group_by(category) %>%
summarise_at(.vars=vars(clicked), .funs=funs(sum,mean))
load('Statistics/applenews.RData')
head(applenews)
library(dplyr)
applenews[applenews$category == "娛樂",]
applenews %>%
group_by(category) %>%
summarise_at(.vars=vars(clicked), .funs=funs(sum,mean))
applenews[, c("category","clicked")]
applenews
?funs
x <- c(3,3,4,3,6,8,8,9) # 藥劑量
y <- c(22,25,18,20,16,9,12,5) # 感冒痊癒天數
New_x <- 5 # 預測當x=5時的痊癒天數
# 建立一個線性迴歸模型
Train <- data.frame(x = x, y = y)
lmTrain <- lm(formula = y ~ x, data = Train)
predicted <- predict(lmTrain , newdata = New_x)
# 預測當x=5時的痊癒天數
# 模型摘要
summary(lmTrain )
# 作圖
plot(y ~ x , main = "依藥劑量預測痊癒天數", xlab = "藥劑量", ylab = "感冒痊癒天數", family = "STHeiti")
points(x = New_x, y = predicted, col="green", cex = 2, pch = 16)
x <- c(3,3,4,3,6,8,8,9) # 藥劑量
y <- c(22,25,18,20,16,9,12,5) # 感冒痊癒天數
New_x <- 5 # 預測當x=5時的痊癒天數
# 建立一個線性迴歸模型
Train <- data.frame(x = x, y = y)
lmTrain <- lm(formula = y ~ x, data = Train)
predicted <- predict(lmTrain , newdata = New_x)
# 預測當x=5時的痊癒天數
# 模型摘要
summary(lmTrain )
# 作圖
plot(y ~ x , main = "依藥劑量預測痊癒天數", xlab = "藥劑量", ylab = "感冒痊癒天數")
points(x = New_x, y = predicted, col="green", cex = 2, pch = 16)
plot(y ~ x , main = "依藥劑量預測痊癒天數", xlab = "藥劑量", ylab = "感冒痊癒天數")
points(x = New_x, y = predicted, col="green", cex = 2, pch = 16)
abline(reg = lmTrain$coefficients, col = "red", lwd = 1)
points(x = New_x, y = predicted, col="green", cex = 2, pch = 16)
points(x = New_x, y = predicted)
?points
points(New_x, predicted)
predicted
New_x
?lm
x <- c(3,3,4,3,6,8,8,9) # 藥劑量
y <- c(22,25,18,20,16,9,12,5) # 感冒痊癒天數
New_x <- 5
# 建立一個線性迴歸模型
Train <- data.frame(x = x, y = y)
lmTrain <- lm(formula = y ~ x, data = Train)
predicted <- predict(lmTrain , newdata = New_x)
# 預測當x=5時的痊癒天數
# 模型摘要
summary(lmTrain )
# 作圖
plot(y ~ x , main = "依藥劑量預測痊癒天數", xlab = "藥劑量", ylab = "感冒痊癒天數")
points(x = New_x, y = lmTrain, col = "green", cex = 2, pch = 16)
x <- c(3,3,4,3,6,8,8,9) # 藥劑量
y <- c(22,25,18,20,16,9,12,5) # 感冒痊癒天數
New_x <- 5
# 建立一個線性迴歸模型
Train <- data.frame(x = x, y = y)
lmTrain <- lm(formula = y ~ x, data = Train)
predicted <- predict(lmTrain , newdata = New_x)
# 預測當x=5時的痊癒天數
# 模型摘要
summary(lmTrain )
# 作圖
plot(y ~ x , main = "依藥劑量預測痊癒天數", xlab = "藥劑量", ylab = "感冒痊癒天數")
points(x = New_x, y = lmTrain, col = "green", cex = 2, pch = 16)
y ~ x
lmTrain
lm(formula = y ~ x, data = Train)
x <- c(3,3,4,3,6,8,8,9) # 藥劑量
y <- c(22,25,18,20,16,9,12,5) # 感冒痊癒天數
New_x <- 5
# 建立一個線性迴歸模型
Train <- data.frame(x = x, y = y)
lmTrain <- lm(formula = y ~ x, data = Train)
predicted <- predict(lmTrain , newdata = New_x)
# 預測當x=5時的痊癒天數
# 模型摘要
summary(lmTrain )
# 作圖
plot(y ~ x , main = "依藥劑量預測痊癒天數", xlab = "藥劑量", ylab = "感冒痊癒天數")
points(x = New_x, y = data.frame(lmTrain), col = "green", cex = 2, pch = 16)
x <- c(3,3,4,3,6,8,8,9) # 藥劑量
y <- c(22,25,18,20,16,9,12,5) # 感冒痊癒天數
New_x <- data.frame(5)
# 建立一個線性迴歸模型
Train <- data.frame(x = x, y = y)
lmTrain <- lm(formula = y ~ x, data = Train)
predicted <- predict(lmTrain , newdata = New_x)
# 預測當x=5時的痊癒天數
# 模型摘要
summary(lmTrain )
# 作圖
plot(y ~ x , main = "依藥劑量預測痊癒天數", xlab = "藥劑量", ylab = "感冒痊癒天數")
points(x = New_x, y = lmTrain, col = "green", cex = 2, pch = 16)
x <- c(3,3,4,3,6,8,8,9) # 藥劑量
y <- c(22,25,18,20,16,9,12,5) # 感冒痊癒天數
New_x <- data.frame(x = 5)
# 建立一個線性迴歸模型
Train <- data.frame(x = x, y = y)
lmTrain <- lm(formula = y ~ x, data = Train)
predicted <- predict(lmTrain , newdata = New_x)
# 預測當x=5時的痊癒天數
# 模型摘要
summary(lmTrain )
# 作圖
plot(y ~ x , main = "依藥劑量預測痊癒天數", xlab = "藥劑量", ylab = "感冒痊癒天數")
points(x = New_x, y = lmTrain, col = "green", cex = 2, pch = 16)
x <- c(3,3,4,3,6,8,8,9) # 藥劑量
y <- c(22,25,18,20,16,9,12,5) # 感冒痊癒天數
New_x <- data.frame(x = 5)
# 建立一個線性迴歸模型
Train <- data.frame(x = x, y = y)
lmTrain <- lm(formula = y ~ x, data = Train)
predicted <- predict(lmTrain , newdata = New_x)
# 預測當x=5時的痊癒天數
# 模型摘要
summary(lmTrain )
# 作圖
plot(y ~ x , main = "依藥劑量預測痊癒天數", xlab = "藥劑量", ylab = "感冒痊癒天數")
points(x = New_x, y = predicted, col = "green", cex = 2, pch = 16)
abline(reg = lmTrain$coefficients, col = "red", lwd = 1)  # 繪製輔助線
class(predicted)
type(predicted)
typeof(predicted)
class(lmTrain)
?lm
x <- c(3,3,4,3,6,8,8,9) # 藥劑量
y <- c(22,25,18,20,16,9,12,5) # 感冒痊癒天數
New_x <- data.frame(x = 5)
# 建立一個線性迴歸模型
Train <- data.frame(x = x, y = y)
lmTrain <- lm(formula = y ~ x, data = Train)
predicted <- predict(lmTrain , newdata = New_x)
# 預測當x=5時的痊癒天數
# 模型摘要
summary(lmTrain )
# 作圖
plot(y ~ x , main = "依藥劑量預測痊癒天數", xlab = "藥劑量", ylab = "感冒痊癒天數")
points(x = New_x, y = predicted, col = "green", cex = 2, pch = 16)
abline(reg = lmTrain$coefficients, col = "red", lwd = 1)  # 繪製輔助線
summary(lmTrain)
summary(predicted)
summary(lmTrain)
# 自行產生藥劑量、平均每日睡眠時間與感冒痊癒天數資料
x1 <- c(3,3,4,3,6,8,8,9)      # 藥劑量
x2 <- c(3,1,6,4,9,10,8,11)    # 平均每日睡眠時數
y <- c(22,25,18,20,16,9,12,5) # 感冒痊癒天數
# 新患者資料
New_x1 <- 5 # 預測當x=5時的痊癒天數
New_x2 <- 7 # 每日睡眠時數
New_data <- data.frame(x1 = 5, x2 = 7)
# 建立一個線性迴歸模型
Train <- data.frame(x1 = x1, x2 = x2, y = y)
lmTrain <- lm(formula = y ~ ., data = Train)
#預測新患者感冒痊癒天數
predicted <- predict(lmTrain, newdata = New_data)
predicted
summary(lmTrain )
install.packages("RJDBC")
drv <- JDBC("com.mysql.jdbc.Driver",
"./mysql-connector-java-5.1.43/mysql-connector-java-5.1.43-bin.jar"
)
library(RJDBC)
drv <- JDBC("com.mysql.jdbc.Driver",
"./mysql-connector-java-5.1.43/mysql-connector-java-5.1.43-bin.jar"
)
drv <- JDBC("com.mysql.jdbc.Driver",
".\mysql-connector-java-5.1.43\mysql-connector-java-5.1.43-bin.jar"
)
drv <- JDBC("com.mysql.jdbc.Driver",
".\\mysql-connector-java-5.1.43\\mysql-connector-java-5.1.43-bin.jar"
)
setwd("D:/RStudioWD/IoT_DataMining")
drv <- JDBC("com.mysql.jdbc.Driver",
".\\mysql-connector-java-5.1.43\\mysql-connector-java-5.1.43-bin.jar"
)
# install.packages("RJDBC")
library(RJDBC)
# 設定連線
setwd("D:/RStudioWD/IoT_DataMining")
drv <- JDBC("com.mysql.jdbc.Driver",
".\\mysql-connector-java-5.1.43\\mysql-connector-java-5.1.43-bin.jar"
)
# DB name: test123, login id: root, login password: tony, 預設port 3306
conn <- dbConnect(drv,
"jdbc:mysql://172.104.90.53:3306/iii",
"iii",
"iii@WSX1qaz"
)
# install.packages("RJDBC")
library(RJDBC)
# 設定連線
setwd("D:/RStudioWD/IoT_DataMining")
drv <- JDBC("com.mysql.jdbc.Driver",
".\\mysql-connector-java-5.1.43\\mysql-connector-java-5.1.43-bin.jar"
)
# DB name: test123, login id: root, login password: tony, 預設port 3306
conn <- dbConnect(drv,
"jdbc:mysql://172.104.90.53:3306/iii",
"iii",
"iii@WSX1qaz"
)
# install.packages("RJDBC")
library(RJDBC)
# 設定連線
setwd("D:/RStudioWD/IoT_DataMining")
drv <- JDBC("com.mysql.jdbc.Driver",
"D:\\RStudioWD\\IoT_DataMining\\mysql-connector-java-5.1.43\\mysql-connector-java-5.1.43-bin.jar"
)
# DB name: test123, login id: root, login password: tony, 預設port 3306
conn <- dbConnect(drv,
"jdbc:mysql://172.104.90.53:3306/iii",
"iii",
"iii@WSX1qaz"
)
# install.packages("RJDBC")
library(RJDBC)
# 設定連線
setwd("D:/RStudioWD/IoT_DataMining")
drv <- JDBC("com.mysql.jdbc.Driver",
".\\mysql-connector-java-5.1.43\\mysql-connector-java-5.1.43-bin.jar"
)
# DB name: test123, login id: root, login password: tony, 預設port 3306
conn <- dbConnect(drv,
"jdbc:mysql://172.104.90.53:3306/iii",
"iii",
"iii@WSX1qaz"
)
# install.packages("RJDBC")
library(RJDBC)
# 設定連線
setwd("D:/RStudioWD/IoT_DataMining")
drv <- JDBC("com.mysql.jdbc.Driver",
".\\mysql-connector-java-5.1.43\\mysql-connector-java-5.1.43-bin.jar"
)
# DB name: test123, login id: root, login password: tony, 預設port 3306
conn <- dbConnect(drv,
"jdbc:mysql://172.104.90.53:3306/iii",
"iii",
"iii@WSX1qaz"
)
# install.packages("RJDBC")
library(RJDBC)
# 設定連線
setwd("D:/RStudioWD/IoT_DataMining")
drv <- JDBC("com.mysql.jdbc.Driver",
"mysql-connector-java-5.1.43-bin.jar"
)
# DB name: test123, login id: root, login password: tony, 預設port 3306
conn <- dbConnect(drv,
"jdbc:mysql://172.104.90.53:3306/iii",
"iii",
"iii@WSX1qaz"
)
# install.packages("RJDBC")
library(RJDBC)
# 設定連線
setwd("D:/RStudioWD/IoT_DataMining")
drv <- JDBC("com.mysql.jdbc.Driver",
"mysql-connector-java-5.1.43-bin.jar"
)
# DB name: test123, login id: root, login password: tony, 預設port 3306
conn <- dbConnect(drv,
"jdbc:mysql://172.104.90.53:3306/iii",
"iii",
"iii@WSX1qaz"
)
# install.packages("RJDBC")
library(RJDBC)
# 設定連線
setwd("D:/RStudioWD/IoT_DataMining")
drv <- JDBC("com.mysql.jdbc.Driver", "mysql-connector-java-5.1.43-bin.jar")
# DB name: test123, login id: root, login password: tony, 預設port 3306
conn <- dbConnect(drv,
"jdbc:mysql://172.104.90.53:3306/iii",
"iii",
"iii@WSX1qaz"
)
# install.packages("RJDBC")
library(RJDBC)
# 設定連線
setwd("D:/RStudioWD/IoT_DataMining")
drv <- JDBC("com.mysql.jdbc.Driver", ".\\mysql-connector-java-5.1.43-bin.jar")
# DB name: test123, login id: root, login password: tony, 預設port 3306
conn <- dbConnect(drv,
"jdbc:mysql://172.104.90.53:3306/iii",
"iii",
"iii@WSX1qaz"
)
# install.packages("RJDBC")
library(RJDBC)
# 設定連線
setwd("D:/RStudioWD/IoT_DataMining")
drv <- JDBC("com.mysql.jdbc.Driver", "C:\\mysql-connector-java-5.1.43-bin.jar")
# DB name: test123, login id: root, login password: tony, 預設port 3306
conn <- dbConnect(drv,
"jdbc:mysql://172.104.90.53:3306/iii",
"iii",
"iii@WSX1qaz"
)
# install.packages("RJDBC")
library(RJDBC)
# 設定連線
drv <- JDBC("com.mysql.jdbc.Driver", "C:\\mysql-connector-java-5.1.43-bin.jar")
# DB name: test123, login id: root, login password: tony, 預設port 3306
conn <- dbConnect(drv,
"jdbc:mysql://172.104.90.53:3306/iii",
"iii",
"iii@WSX1qaz"
)
library(RJDBC)
drv <- JDBC("com.mysql.jdbc.Driver", "C:\\mysql-connector-java-5.1.43-bin.jar")
conn <- dbConnect(drv,
"jdbc:mysql://172.104.90.53:3306/iii",
"iii",
"iii@WSX1qaz"
)
